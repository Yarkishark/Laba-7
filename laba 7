"""Требуется для своего варианта второй части л.р. №6 (усложненной программы) разработать реализацию с использованием графического интерфейса. 
Рекомендуется использовать внутреннюю библиотеку питона tkinter. В программе должны быть реализованы минимум одно окно ввода, 
одно окно вывода (со скролингом), одно текстовое поле, одна кнопка. 
На плоскости задано К точек. Сформировать все возможные варианты выбора множества точек из них на 
проверку того, что они являются вершинами квадрата с максимальной площадью."""

import tkinter as tk
import itertools

def distance(p1, p2):
    return (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2

def is_square(p1, p2, p3, p4):
    distances = [distance(p1, p2), distance(p1, p3), distance(p1, p4), distance(p2, p3), distance(p2, p4), distance(p3, p4)]
    distances.sort()
    return distances[0] > 0 and distances[0] == distances[1] == distances[2] == distances[3] and distances[4] == distances[5]

def find_squares(points):
    squares = []
    max_area = 0
    for square in itertools.combinations(points, 4):
        x_values = [point[0] for point in square]
        y_values = [point[1] for point in square]
        if all(x > 0 and y > 0 for x, y in zip(x_values, y_values)):
            side = distance(square[0], square[1])**0.5
            area = side**2
            if is_square(*square) and area > max_area:
                squares = [square]
                max_area = area
    return squares

def on_submit():
    points = []
    for entry_point in entry_points:
        x, y = map(int, entry_point.get().split())
        points.append((x, y))
    squares = find_squares(points)
    output_text.delete(1.0, tk.END)
    output_text.insert(tk.END, "Квадрат с максимальной площадью и вершинами в одном квадранте:\n")
    for square in squares:
        output_text.insert(tk.END, str(square) + "\n")

def create_point_entries():
    k = int(entry.get())
    for widget in entry_points_widgets:
        widget.destroy()
    entry_points.clear()
    entry_points_widgets.clear()
    for i in range(k):
        label_point = tk.Label(root, text=f"Введите координаты точки {i+1} (через пробел):")
        label_point.pack()
        entry_point = tk.Entry(root)
        entry_point.pack()
        entry_points.append(entry_point)
        entry_points_widgets.append(label_point)
        entry_points_widgets.append(entry_point)

root = tk.Tk()
root.title("Поиск квадрата с максимальной площадью")

label = tk.Label(root, text="Введите количество точек:")
label.pack()
entry = tk.Entry(root)
entry.pack()

entry_points = []
entry_points_widgets = []

submit_button = tk.Button(root, text="Подтвердить количество точек", command=create_point_entries)
submit_button.pack()

submit_button_find = tk.Button(root, text="Поиск", command=on_submit)
submit_button_find.pack()

output_text = tk.Text(root, height=10, width=40)
output_text.pack()

window_width = 400
window_height = 300
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x_coordinate = int((screen_width/2) - (window_width/2))
y_coordinate = int((screen_height/2) - (window_height/2))
root.geometry("{}x{}+{}+{}".format(window_width, window_height, x_coordinate, y_coordinate))

root.mainloop()
