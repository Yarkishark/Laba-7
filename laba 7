"""Требуется для своего варианта второй части л.р. №6 (усложненной программы) разработать реализацию с использованием графического интерфейса. 
Рекомендуется использовать внутреннюю библиотеку питона tkinter. В программе должны быть реализованы минимум одно окно ввода, 
одно окно вывода (со скролингом), одно текстовое поле, одна кнопка. 
На плоскости задано К точек. Сформировать все возможные варианты выбора множества точек из них на 
проверку того, что они являются вершинами квадрата с максимальной площадью."""

import itertools
import tkinter as tk
from tkinter import messagebox

def distance(p1, p2):
    return (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2

def is_square(p1, p2, p3, p4):
    distances = [distance(p1, p2), distance(p1, p3), distance(p1, p4),
                 distance(p2, p3), distance(p2, p4), distance(p3, p4)]
    distances.sort()
    return distances[0] > 0 and distances[0] == distances[1] == distances[2] == distances[3] and distances[4] == distances[5]

def find_squares(points):
    squares = []
    max_area = 0
    for square in itertools.combinations(points, 4):
        x_values = [point[0] for point in square]
        y_values = [point[1] for point in square]
        if all(x > 0 and y > 0 for x, y in zip(x_values, y_values)):
            side = distance(square[0], square[1])**0.5
            area = side**2
            if is_square(*square) and area > max_area:
                squares = [square]
                max_area = area
               
    return squares

def on_next_button_press():
    global index
    try:
        k = int(num_entries.get())
        if k <= 3:
            messagebox.showerror("Ошибка", "Пожалуйста введите число больше или равно 4.")
            num_entries.delete(0, 'end')
        else:
            num_entries.config(state='disabled')
            next_button.config(state='disabled')
            for i in range(k):
                coord_entries.append([])
                label = tk.Label(canvas, text=f"Введите координаты {i+1} точки (через пробел):")
                label.pack()
                entry = tk.Text(canvas, height=1, width=15)
                coord_entries[i].append(entry)
                entry.pack()
            
            search_button.pack()
    except ValueError:
        messagebox.showerror("Ошибка", "Пожалуйста, введите количество точек целым числом.")
        num_entries.delete(0, 'end')

def on_search_button_press():
    points = []
    for entry in coord_entries:
        try:
            input_text = entry[0].get("1.0", tk.END).strip().split()
            x = int(input_text[0])
            y = int(input_text[1])
            if (x, y) in points:
                messagebox.showerror("Ошибка", "Точка с такими координатами уже была введена. Пожалуйста, введите другие координаты.")
                entry[0].delete("1.0", tk.END)
                entry[0].focus_set()
                return
            if x <= 0 or y <= 0:
                messagebox.showerror("Ошибка", "Пожалуйста, введите две положительные координаты для точки.")
                entry[0].delete("1.0", tk.END)
                entry[0].focus_set()
                return
            points.append((x, y))
        except (ValueError, IndexError):
            messagebox.showerror("Ошибка", "Пожалуйста, введите количество точек целым числом.")
            entry[0].delete("1.0", tk.END)
            entry[0].focus_set()
            return
    
    squares = find_squares(points)
    if squares:
        result_text.config(state='normal')
        result_text.delete('1.0', tk.END)
        result_text.insert(tk.END, "Квадрат с максимальной площадью и вершинами в одном квадранте:\n")
        for square in squares:
            result_text.insert(tk.END, f"{square}\n")
        result_text.config(state='disabled')
    else:
        result_text.config(state='normal')
        result_text.delete('1.0', tk.END)
        result_text.insert(tk.END, "Из данных точек невозможно образовать квадрат(ы).")
        result_text.config(state='disabled')

root = tk.Tk()
root.title("Square Finder")

num_label = tk.Label(root, text="Введите количество точек:")
num_label.pack()

num_entries = tk.Entry(root)
num_entries.pack()

next_button = tk.Button(root, text="Далее", command=on_next_button_press)
next_button.pack()

coord_entries = []
canvas = tk.Canvas(root, width=300, height=210, bg="white")
canvas.pack()

search_button = tk.Button(root, text="Поиск", command=on_search_button_press)

result_text = tk.Text(root, height=10, width=80)
result_text.pack()

window_width = 500
window_height = 500
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x_coordinate = int((screen_width/2) - (window_width/2))
y_coordinate = int((screen_height/2) - (window_height/2))
root.geometry("{}x{}+{}+{}".format(window_width, window_height, x_coordinate, y_coordinate))

root.mainloop()

